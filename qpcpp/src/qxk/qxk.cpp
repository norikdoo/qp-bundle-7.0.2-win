//$file${src::qxk::qxk.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: qpcpp.qm
// File:  ${src::qxk::qxk.cpp}
//
// This code has been generated by QM 5.2.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This code is covered by the following QP license:
// License #    : LicenseRef-QL-dual
// Issued to    : Any user of the QP/C++ real-time embedded framework
// Framework(s) : qpcpp
// Support ends : 2023-12-31
// License scope:
//
// Copyright (C) 2005 Quantum Leaps, LLC <state-machine.com>.
//
// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
//
// This software is dual-licensed under the terms of the open source GNU
// General Public License version 3 (or any later version), or alternatively,
// under the terms of one of the closed source Quantum Leaps commercial
// licenses.
//
// The terms of the open source GNU General Public License version 3
// can be found at: <www.gnu.org/licenses/gpl-3.0>
//
// The terms of the closed source Quantum Leaps commercial licenses
// can be found at: <www.state-machine.com/licensing>
//
// Redistributions in source code must retain this top-level comment block.
// Plagiarizing this software to sidestep the license obligations is illegal.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${src::qxk::qxk.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//! @date Last updated on: 2022-06-30
//! @version Last updated for: @ref qpcpp_7_0_1
//!
//! @file
//! @brief QXK/C++ preemptive kernel core functions
//! public interface.

#define QP_IMPL             // this is QP implementation
#include "qf_port.hpp"      // QF port
#include "qf_pkg.hpp"       // QF package-scope internal interface
#include "qassert.h"        // QP embedded systems-friendly assertions
#ifdef Q_SPY                // QS software tracing enabled?
    #include "qs_port.hpp"  // QS port
    #include "qs_pkg.hpp"   // QS facilities for pre-defined trace records
#else
    #include "qs_dummy.hpp" // disable the QS software tracing
#endif // Q_SPY

// protection against including this source file in a wrong project
#ifndef QXK_HPP
#error "Source file included in a project NOT based on the QXK kernel"
#endif // QXK_HPP

//============================================================================
namespace { // unnamed local namespace
Q_DEFINE_THIS_MODULE("qxk")
} // unnamed namespace

//============================================================================
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${QXK::QXK-base} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace QP {
namespace QXK {

//${QXK::QXK-base::schedLock} ................................................
QSchedStatus schedLock(std::uint_fast8_t const ceiling) noexcept {
    QF_CRIT_STAT_
    QF_CRIT_E_();

    //! @pre The QXK scheduler lock:
    //! - cannot be called from an ISR;
    Q_REQUIRE_ID(400, !QXK_ISR_CONTEXT_());

    // first store the previous lock prio if below the ceiling
    QSchedStatus stat;
    if (static_cast<std::uint_fast8_t>(QXK_attr_.lockPrio) < ceiling) {
        stat = (static_cast<QSchedStatus>(QXK_attr_.lockPrio) << 8U);
        QXK_attr_.lockPrio = static_cast<std::uint8_t>(ceiling);

        QS_BEGIN_NOCRIT_PRE_(QS_SCHED_LOCK, 0U)
            QS_TIME_PRE_(); // timestamp
            // the previous lock prio & new lock prio
            QS_2U8_PRE_(stat, QXK_attr_.lockPrio);
        QS_END_NOCRIT_PRE_()

        // add the previous lock holder priority
        stat |= static_cast<QSchedStatus>(QXK_attr_.lockHolder);
        QXK_attr_.lockHolder = (QXK_attr_.curr != nullptr)
                               ? QXK_attr_.curr->m_prio
                               : 0U;
    }
    else {
       stat = 0xFFU;
    }
    QF_CRIT_X_();

    return stat; // return the status to be saved in a stack variable
}

//${QXK::QXK-base::schedUnlock} ..............................................
void schedUnlock(QSchedStatus const stat) noexcept {
    // has the scheduler been actually locked by the last QXK::schedLock()?
    if (stat != 0xFFU) {
        std::uint_fast8_t const prevPrio
            = static_cast<std::uint_fast8_t>(stat >> 8U);
        std::uint_fast8_t const lockPrio
            = static_cast<std::uint_fast8_t>(QXK_attr_.lockPrio);
        Q_UNUSED_PAR(lockPrio); // unused if Q_NASSERT is defined

        QF_CRIT_STAT_
        QF_CRIT_E_();

        //! @pre The scheduler cannot be unlocked:
        //! - from the ISR context; and
        //! - the current lock priority must be greater than the previous
        Q_REQUIRE_ID(500, (!QXK_ISR_CONTEXT_())
                          && (lockPrio > prevPrio));

        QS_BEGIN_NOCRIT_PRE_(QS_SCHED_UNLOCK, 0U)
            QS_TIME_PRE_(); // timestamp
            // prio before unlocking & prio after unlocking
            QS_2U8_PRE_(lockPrio, prevPrio);
        QS_END_NOCRIT_PRE_()

        // restore the previous lock priority and lock holder
        QXK_attr_.lockPrio   = static_cast<std::uint8_t>(prevPrio);
        QXK_attr_.lockHolder = static_cast<std::uint8_t>(stat & 0xFFU);

        // find the highest-prio thread ready to run
        if (QXK_sched_() != 0U) { // priority found?
            QXK_activate_(); // activate any unlocked basic threads
        }

        QF_CRIT_X_();
    }
}

} // namespace QXK
} // namespace QP
//$enddef${QXK::QXK-base} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${QXK::QF-cust} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace QP {
namespace QF {

//${QXK::QF-cust::init} ......................................................
void init() {
    QF::maxPool_ = 0U;
    QActive::subscrList_   = nullptr;
    QActive::maxPubSignal_ = 0;

    bzero(&QTimeEvt::timeEvtHead_[0], sizeof(QTimeEvt::timeEvtHead_));
    bzero(&QActive::registry_[0],     sizeof(QActive::registry_));
    bzero(&QF::readySet_,  sizeof(QF::readySet_));
    bzero(&QXK_attr_,      sizeof(QXK_attr_));
    bzero(&QXThread::idle, sizeof(QXThread::idle));

    // setup the QXK scheduler as initially locked and not running
    QXK_attr_.lockPrio = QF_MAX_ACTIVE + 1U;

    // setup the QXK idle loop...
    QActive::registry_[0] = &QXThread::idle; // register the idle thread
    QXK_attr_.actPrio = QXThread::idle.m_prio; // set the base priority

    #ifdef QXK_INIT
    QXK_INIT(); // port-specific initialization of the QXK kernel
    #endif
}

//${QXK::QF-cust::stop} ......................................................
void stop() {
    onCleanup();  // cleanup callback
    // nothing else to do for the QXK preemptive kernel
}

//${QXK::QF-cust::run} .......................................................
int_t run() {
    QF_INT_DISABLE();
    QXK_attr_.lockPrio = 0U; // unlock the scheduler

    // any active objects need to be scheduled before starting event loop?
    if (QXK_sched_() != 0U) {
        QXK_activate_(); // process all events produced so far
    }

    onStartup(); // application-specific startup callback

    // produce the QS_QF_RUN trace record
    QS_BEGIN_NOCRIT_PRE_(QS_QF_RUN, 0U)
    QS_END_NOCRIT_PRE_()

    QF_INT_ENABLE();

    // the QXK idle loop...
    for (;;) {
        QXK::onIdle(); // application-specific QXK idle callback
    }

    #ifdef __GNUC__  // GNU compiler?
    return 0;
    #endif
}

} // namespace QF
} // namespace QP
//$enddef${QXK::QF-cust} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${QXK::QActive} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace QP {

//${QXK::QActive} ............................................................

//${QXK::QActive::start} .....................................................
void QActive::start(
    std::uint_fast8_t const prio,
    QEvt const * * const qSto,
    std::uint_fast16_t const qLen,
    void * const stkSto,
    std::uint_fast16_t const stkSize,
    void const * const par)
{
    //! @pre AO cannot be started:
    //! - from an ISR;
    //! - the priority must be in range;
    //! - the stack storage must NOT be provided (because the QXK kernel does
    //! not need per-AO stacks).
    Q_REQUIRE_ID(200, (!QXK_ISR_CONTEXT_())
        && (0U < prio) && (prio <= QF_MAX_ACTIVE)
        && (stkSto == nullptr)
        && (stkSize == 0U));

    m_eQueue.init(qSto, qLen); // initialize QEQueue of this AO
    m_osObject  = nullptr; // no private stack for AO
    m_prio      = static_cast<std::uint8_t>(prio); // prio of the AO
    m_dynPrio   = static_cast<std::uint8_t>(prio); // dynamic prio of the AO
    register_();  // make QF aware of this AO

    this->init(par, m_prio); // take the top-most initial tran. (virtual)
    QS_FLUSH(); // flush the trace buffer to the host

    // see if this AO needs to be scheduled in case QXK is running
    QF_CRIT_STAT_
    QF_CRIT_E_();
    if (QXK_sched_() != 0U) { // activation needed?
        QXK_activate_();
    }
    QF_CRIT_X_();
}

} // namespace QP
//$enddef${QXK::QActive} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
extern "C" {
//$define${QXK-extern-C} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QXK-extern-C::QXK_attr_} .................................................
QXK_Attr QXK_attr_;

//${QXK-extern-C::QXK_sched_} ................................................
std::uint_fast8_t QXK_sched_() noexcept {
    // find the highest-prio thread ready to run
    std::uint_fast8_t p = QP::QF::readySet_.findMax();

    // below the lock prio?
    if (p <= static_cast<std::uint_fast8_t>(QXK_attr_.lockPrio)) {
        // dynamic priority of the thread holding the lock
        p = static_cast<std::uint_fast8_t>(
             QP::QActive::registry_[QXK_attr_.lockHolder]->m_dynPrio);
        if (p != 0U) {
            Q_ASSERT_ID(610, QP::QF::readySet_.hasElement(p));
        }
    }

    QP::QActive * const next = QP::QActive::registry_[p];

    // the thread found must be registered in QF
    Q_ASSERT_ID(620, next != nullptr);

    // is the current thread a basic-thread?
    if (QXK_attr_.curr == nullptr) {

        // is next a basic-thread?
        if (next->m_osObject == nullptr) {
            if (p > static_cast<std::uint_fast8_t>(QXK_attr_.actPrio)) {
                QXK_attr_.next = next; // set the next AO to activate
            }
            else {
                QXK_attr_.next = nullptr;
                p = 0U; // no activation needed
            }
        }
        else {  // this is an extened-thread

            QS_BEGIN_NOCRIT_PRE_(QP::QS_SCHED_NEXT, next->m_prio)
                QS_TIME_PRE_();  // timestamp
                // prio of the next AO & prio of the curr AO
                QS_2U8_PRE_(p, QXK_attr_.actPrio);
            QS_END_NOCRIT_PRE_()

            QXK_attr_.next = next;
            p = 0U; // no activation needed
            QXK_CONTEXT_SWITCH_();
        }
    }
    else { // currently executing an extended-thread

        // is the next thread different from the current?
        if (next != QXK_attr_.curr) {

            QS_BEGIN_NOCRIT_PRE_(QP::QS_SCHED_NEXT, next->m_prio)
                QS_TIME_PRE_(); // timestamp
                // next prio & current prio
                QS_2U8_PRE_(p, QXK_attr_.curr->m_prio);
            QS_END_NOCRIT_PRE_()

            QXK_attr_.next = next;
            p = 0U; // no activation needed
            QXK_CONTEXT_SWITCH_();
        }
        else { // next is the same as current
            QXK_attr_.next = nullptr; // no need to context-switch
            p = 0U; // no activation needed
        }
    }
    return p;
}

//${QXK-extern-C::QXK_activate_} .............................................
void QXK_activate_() noexcept {
    std::uint_fast8_t const pin =
        static_cast<std::uint_fast8_t>(QXK_attr_.actPrio);
    QP::QActive *a = QXK_attr_.next; // the next AO (basic-thread) to run

    // QXK Context switch callback defined or QS tracing enabled?
    #if (defined QXK_ON_CONTEXT_SW) || (defined Q_SPY)
    std::uint_fast8_t pprev = pin;
    #endif // QXK_ON_CONTEXT_SW || Q_SPY

    //! @pre QXK_attr_.next must be valid
    Q_REQUIRE_ID(700, (a != nullptr) && (pin < QF_MAX_ACTIVE));

    // dynamic priority of the next AO
    std::uint_fast8_t p = static_cast<std::uint_fast8_t>(a->m_dynPrio);

    // loop until no more ready-to-run AOs of higher prio than the initial
    do  {
        a = QP::QActive::registry_[p]; // obtain the pointer to the AO

        QXK_attr_.actPrio = static_cast<std::uint8_t>(p); // new active prio
        QXK_attr_.next = nullptr; // clear the next AO

        QS_BEGIN_NOCRIT_PRE_(QP::QS_SCHED_NEXT, a->m_prio)
            QS_TIME_PRE_();         // timestamp
            // next prio & prev prio
            QS_2U8_PRE_(p, pprev);
        QS_END_NOCRIT_PRE_()

    #if (defined QXK_ON_CONTEXT_SW) || (defined Q_SPY)
        if (p != pprev) {  // changing threads?

    #ifdef QXK_ON_CONTEXT_SW
            Q_ASSERT_ID(710, pprev < QF_MAX_ACTIVE);

            // context-switch callback
            QXK_onContextSw(((pprev!=0U)
                                ? QP::QActive::registry_[pprev]
                                : nullptr),
                            a);
    #endif // QXK_ON_CONTEXT_SW

             pprev = p; // update previous priority
         }
    #endif // QXK_ON_CONTEXT_SW || Q_SPY

        QF_INT_ENABLE(); // unconditionally enable interrupts

        // perform the run-to-completion (RTC) step...
        // 1. retrieve the event from the AO's event queue, which by this
        //    time must be non-empty and QActive_get_() asserts it.
        // 2. dispatch the event to the AO's state machine.
        // 3. determine if event is garbage and collect it if so
        //
        QP::QEvt const * const e = a->get_();
        a->dispatch(e, a->m_prio);
        QP::QF::gc(e);

        QF_INT_DISABLE(); // unconditionally disable interrupts

        if (a->m_eQueue.isEmpty()) { // empty queue?
            QP::QF::readySet_.rmove(p);
        }

        // find new highest-prio AO ready to run...
        // NOTE: this part must match the QXK_sched_(),
        // current is a basic-thread path.
        p = QP::QF::readySet_.findMax();

        // below scheduler lock?
        if (p <= static_cast<std::uint_fast8_t>(QXK_attr_.lockPrio)) {
            p = static_cast<std::uint_fast8_t>(QXK_attr_.lockHolder);
            if (p != 0U) {
                Q_ASSERT_ID(710, QP::QF::readySet_.hasElement(p));
            }
        }
        a = QP::QActive::registry_[p];

        // the AO must be registered in QF
        Q_ASSERT_ID(720, a != nullptr);

        // is the next a basic thread?
        if (a->m_osObject == nullptr) {
            if (p > pin) {
                QXK_attr_.next = a;
            }
            else {
                QXK_attr_.next = nullptr;
                p = 0U; // no activation needed
            }
        }
        else {  // next is the extened thread

            QS_BEGIN_NOCRIT_PRE_(QP::QS_SCHED_NEXT, a->m_prio)
                QS_TIME_PRE_(); // timestamp
                // next prio & curr prio
                QS_2U8_PRE_(p, QXK_attr_.actPrio);
            QS_END_NOCRIT_PRE_()

            QXK_attr_.next = a;
            p = 0U; // no activation needed
            QXK_CONTEXT_SWITCH_();
        }
    } while (p != 0U); // while activation needed

    QXK_attr_.actPrio = static_cast<std::uint8_t>(pin); // restore base prio

    #if (defined QXK_ON_CONTEXT_SW) || (defined Q_SPY)
    if (pin != 0U) { // resuming an active object?
        a = QP::QActive::registry_[pin]; // the pointer to the preempted AO

        QS_BEGIN_NOCRIT_PRE_(QP::QS_SCHED_RESUME, a->m_prio)
            QS_TIME_PRE_();  // timestamp
            QS_2U8_PRE_(pin, pprev); // resumed prio & previous prio
        QS_END_NOCRIT_PRE_()
    }
    else {  // resuming priority==0 --> idle
        a = nullptr;

        QS_BEGIN_NOCRIT_PRE_(QP::QS_SCHED_IDLE, 0U)
            QS_TIME_PRE_();    // timestamp
            QS_U8_PRE_(pprev); // previous prio
        QS_END_NOCRIT_PRE_()
    }

    #ifdef QXK_ON_CONTEXT_SW
    // context-switch callback
    QXK_onContextSw(QP::QActive::registry_[pprev], a);
    #endif // QXK_ON_CONTEXT_SW

    #endif // QXK_ON_CONTEXT_SW || Q_SPY
}

//${QXK-extern-C::QXK_current} ...............................................
QP::QActive * QXK_current() noexcept {
    //! @pre the QXK kernel must be running
    Q_REQUIRE_ID(800, QXK_attr_.lockPrio <= QF_MAX_ACTIVE);

    QF_CRIT_STAT_
    QF_CRIT_E_();

    QP::QActive *curr = QXK_attr_.curr;
    if (curr == nullptr) { // basic thread?
        curr = QP::QActive::registry_[QXK_attr_.actPrio];
    }
    QF_CRIT_X_();

    //! @post the current thread must be valid
    Q_ENSURE_ID(890, curr != nullptr);

    return curr;
}

//${QXK-extern-C::QXK_threadExit_} ...........................................
void QXK_threadExit_() {
    QF_CRIT_STAT_
    QF_CRIT_E_();

    QP::QXThread const * const thr = QXTHREAD_CAST_(QXK_attr_.curr);

    //! @pre this function must:
    //! - NOT be called from an ISR;
    //! - be called from an extended thread;
    Q_REQUIRE_ID(900, (!QXK_ISR_CONTEXT_())
        && (thr != nullptr));
    //! @pre also: the thread must NOT be holding a scheduler lock.
    Q_REQUIRE_ID(901, QXK_attr_.lockHolder != thr->m_prio);

    std::uint_fast8_t const p =
        static_cast<std::uint_fast8_t>(thr->m_prio);

    // remove this thread from the QF
    QP::QActive::registry_[p] = nullptr;
    QP::QF::readySet_.rmove(p);
    static_cast<void>(QXK_sched_());
    QF_CRIT_X_();
}
//$enddef${QXK-extern-C} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
} // extern "C"
